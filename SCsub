import os

Import('env')

module_env = env.Clone()

if os.path.isdir('../mesh_data_resource'):
    module_env.Append(CPPDEFINES=['MESH_DATA_RESOURCE_PRESENT'])

if os.path.isdir('../texture_packer'):
    module_env.Append(CPPDEFINES=['TEXTURE_PACKER_PRESENT'])

if os.path.isdir('../terraman'):
    module_env.Append(CPPDEFINES=['TERRAMAN_PRESENT'])

if os.path.isdir('../mesh_utils'):
    module_env.Append(CPPDEFINES=['MESH_UTILS_PRESENT'])

sources = [

    "register_types.cpp",

    "props/prop_data.cpp",
    "props/prop_data_entry.cpp",
    "props/prop_data_scene.cpp",
    "props/prop_data_light.cpp",
    "props/prop_data_prop.cpp",

    "clutter/ground_clutter.cpp",
    "clutter/ground_clutter_foliage.cpp",

    "prop_instance.cpp",
    "prop_ess_entity.cpp",
   # "prop_instance_job.cpp",

    "prop_scene_instance.cpp",

    "singleton/prop_utils.cpp",

    "editor/prop_editor_plugin.cpp",

    "prop_mesher.cpp",

    "prop_mesher_job_step.cpp",
]

if ARGUMENTS.get('custom_modules_shared', 'no') == 'yes':
    # Shared lib compilation
    module_env.Append(CCFLAGS=['-fPIC'])
    module_env['LIBS'] = []
    shared_lib = module_env.SharedLibrary(target='#bin/props', source=sources)
    shared_lib_shim = shared_lib[0].name.rsplit('.', 1)[0]
    env.Append(LIBS=[shared_lib_shim])
    env.Append(LIBPATH=['#bin'])
else:
    # Static compilation
    module_env.add_source_files(env.modules_sources, sources)

